<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        6/+nzIn/us57/3jHrv8LqP3/Am/3/2OVsv+3uXj/rLWA/yh41v8lYbP/pY9L/7CTQ/9edIH/AFTN/yGO
        9v9ypq7/vKpV/7aqXP9To9P/cm54/7dKD//TVBn/3FYb/9tWG//bVhus21YbbNtWG/vbVhv/21Yb/95U
        F/+OenD/ILDr/yWw5/8lsOf/I7Ho/xug6/8Fb/X/Bm3z/wlu8f8JbvL/HHPf/xlevP8FU8X/BVPF/wJS
        x/8EVMv/LYji/zyZ6P9Amub/QZrm/z2a6/+Gbm//1VIW/9xWG//bVhv/21Yb+9tWG2zbVhsq21Yb3ttW
        G//bVhv/3FYa/85cKf+7ZT7/u2U//7tlP/+7ZT7/tmND/1hkoP8GbPP/AGv4/ziD0f/NvmH/yaI4/zVl
        of8AUMz/AlHI/0JPg/+QVDn/pVs5/71hP//AYj//wGI//89bKv/cVhr/21Yb/9tWG//bVhve21YbKttW
        GwLbVhuX21Yb/9tWG//bVhv/3FYa/91VGf/dVRn/3VUZ/91VGf/eVRj/0Vcl/2hikP8FavP/a5qt///V
        PP/8tRH/anl6/wFPyP9OTnX/oUka/7pMEf/XVBj/3VUZ/91VGf/dVRn/3FYa/9tWG//bVhv/21Yb/9tW
        G5fbVhsC21YbANtWGzfbVhvp21Yb/9tWG//bVhv/21Yb/9tWG//bVhv/21Yb/9tWG//cVhr/1lcg/3Zf
        gf8ye9L/q7B6/6iVUf8tX6X/WExp/6VJFv+5TRP/1VUa/9xWG//bVhv/21Yb/9tWG//bVhv/21Yb/9tW
        G//bVhvp21YbN9tWGwDbVhsA21YbAttWG4nbVhv/21Yb/9tWG//bVhv/21Yb/9tWG//bVhv/21Yb/9tW
        G//cVhr/2lYd/4Zecf8Zadr/FFe8/2VMW/+oSRP/uU0T/9VVGv/cVhv/21Yb/9tWG//bVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG4nbVhsC21YbAAAAAADbVhsA21YbGttWG8HbVhv/21Yb/9tWG//bVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG//cVhr/zlMU/3RbZf9tVF//qkkQ/7hNE//VVRr/3FYb/9tWG//bVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG//bVhvB21YbGttWGwAAAAAAAAAAANtWGwDbVhsA21YbNttWG9jbVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG//bVhv/3Fca/8NLMP90Jmj/a0F9/5VZPP+5TBH/1VUa/9xWG//bVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG//bVhv/21Yb2NtWGzbbVhsA21YbAAAAAAAAAAAAAAAAANtWGwDbVhsA21YbQdtW
        G9nbVhv/21Yb/9tWG//bVhv/21Yb/9tWG//dVxn/t0Q+/1IRof9YMqX/pFs//9dUF//cVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG//bVhv/21Yb/9tWG9nbVhtB21YbANtWGwAAAAAAAAAAAAAAAAAAAAAAAAAAANtW
        GwDbVhsA21YbNdtWG8LbVhv+21Yb/9tWG//bVhv/21Yb/9tWG//YVB7/0FAm/81UK//UWCL/3FYb/9tW
        G//bVhv/21Yb/9tWG//bVhv/21Yb/9tWG/7bVhvC21YbNdtWGwDbVhsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANtWGwDbVhsA21YbGttWG4nbVhvq21Yb/9tWG//bVhv/21Yb/9tWG//cVhr/3FYa/9tW
        Gv/bVhv/21Yb/9tWG//bVhv/21Yb/9tWG//bVhvq21YbidtWGxrbVhsA21YbAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADbVhsA21YbA9tWGzfbVhuX21Yb39tWG/vbVhv/21Yb/9tW
        G//bVhv/21Yb/9tWG//bVhv/21Yb/9tWG/vbVhvf21Ybl9tWGzfbVhsD21YbAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA21YbANtWGwTbVhsp21YbbNtW
        G6zbVhvZ21Yb8ttWG/3bVhv921Yb8ttWG9nbVhus21YbbNtWGynbVhsE21YbAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAH/AAAA/gAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>